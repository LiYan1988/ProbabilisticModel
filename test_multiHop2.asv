% test the multi hop scenario

clc;
clear;
close all;

rng(0);

%% Define fiber parameters
alpha = 0.22; % dB/km, attenuation of fiber, NOTE: alpha is positive!
alpha = alpha*1e-4*log(10); % 1/m
L = 100e3; % m, length of one span
h = 6.626e-34; % J*s, Plank's constant
niu = 193.548e12; % Hz, frequency of lightwave at 1550 nm
nsp = 10^(5.5/10)/2; % spontaneous emission factor
Nase = (exp(alpha*L)-1)*h*niu*nsp; % ASE per polarization per span
% W/Hz, signal side ASE noise spectral density
gamma = 1.32e-3; % 1/(W*m), nonlinear parameter
% gamma = 0;
beta = -2.1668e-26; % s^2/m, GVD parameter, D = 18 ps/(nm*km),
% beta = -D*lambda^2/(2*pi*c)
beta = abs(beta); % the absolute value is used in calculation

systemParameters = struct();
systemParameters.alpha = alpha;
systemParameters.beta = beta;
systemParameters.gamma = gamma;
systemParameters.Nase = Nase;

gb = 200; % the guardband 

%% topology
NodeList = [1; 2; 3; 4];
NNodes = length(NodeList);
NetworkCost = [[inf, 5, inf, inf]; [5, inf, 5, inf]; ...
    [inf, 5, inf, 5]; [inf, inf, 5, inf]]; % unit is the number of spans
NetworkConnectivity = 1-isinf(NetworkCost);
tmpNetworkCost = NetworkConnectivity.*NetworkCost;
tmpNetworkCost(isnan(tmpNetworkCost)) = 0;
[i, j, s] = find(tmpNetworkCost);
LinkList = [i, j];
NLinks = size(LinkList, 1);
LinkListIDs = (1:NLinks)';
LinkLengths = s;

LinksTable = table(LinkListIDs, LinkList(:, 1), LinkList(:, 2), ...
    LinkLengths, 'variablenames', {'LinkID', 'Source', 'Destination', ...
    'LinkLength'});

TopologyStruct = struct();
TopologyStruct.NodeList = NodeList;
TopologyStruct.NNodes = NNodes;
TopologyStruct.NetworkCost = NetworkCost;
TopologyStruct.NetworkConnectivity = NetworkConnectivity;
TopologyStruct.LinkList = LinkList;
TopologyStruct.NLinks = NLinks;
TopologyStruct.LinkListIDs = LinkListIDs;
TopologyStruct.LinkLengths = LinkLeng;

%% generate traffic demands
Ndemands = 20;
[demandsMatrix, demandsTable, SetOfDemandsOnLink] = ...
    createTrafficDemands(NNodes, Ndemands);

%% calculate initial bandwidths using TR model
demandsBandwidths = zeros(Ndemands, 1);
for n=1:Ndemands
    demandsBandwidths(n) = initilizeSpectrumTR(demandsMatrix(n, 3), demandPathLength(n));
end

%% calculate noise based on bandwidths
demandsNoise = zeros(Ndemands, 1);
demandsSE = zeros(Ndemands, 1);
for n=1:Ndemands
    noiseTemp = 0;
    % calculate noise on each link
    linkListTemp = [demandPaths{n}(1:end-1)', demandPaths{n}(2:end)'];
    [~, linkIDTemp] = ismember(linkListTemp, LinkList, 'rows');
    linkLengthTemp = LinkLengths(linkIDTemp); 
    nLinkTemp = length(linkLengthTemp);
    demandsOnLinkTemp = cell(nLinkTemp, 1);
    for l=1:nLinkTemp
        demandsTemp = SetOfDemandsOnLink{linkIDTemp(l)};
        idx = ismember(n, demandsTemp);
        noiseVectorTemp = zeros(length(demandsTemp), 1);
        noiseVectorTemp(idx) = noiseTemp;
        dataRatesTemp = demandsMatrix(demandsTemp, 3);
        [seTemp, nTemp] = updateSpectrumGN2(dataRatesTemp, linkLengthTemp(l), systemParameters, gb, noiseVectorTemp);
        noiseTemp = nTemp(idx);
    end
    demandsNoise(n) = noiseTemp;
    demandsSE(n) = seTemp(idx);
    demandsBandwidths(n) = demandsMatrix(n, 3)/demandsSE(n);
end